<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Darya Vanichkina</title>
    <link>https://daryavanichkina.com/tags/r/</link>
    <description>Recent content in R on Darya Vanichkina</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 28 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://daryavanichkina.com/tags/r/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Installing packages on a PBS-Pro HPC cluster using renv</title>
      <link>https://daryavanichkina.com/posts/2021-07-28-renvhpc/</link>
      <pubDate>Wed, 28 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://daryavanichkina.com/posts/2021-07-28-renvhpc/</guid>
      <description>&lt;h2 id=&#34;using-renv-on-a-pbs-pro-hpc-cluster&#34;&gt;Using renv on a PBS-Pro HPC cluster&lt;/h2&gt;
&lt;p&gt;Today someone asked about my workflow for using R on an HPC cluster, and - more specifically - about how to install packages when executing a workflow that requires use of HPC. Google wasn&amp;rsquo;t helpful with providing a link to share - so the onus is on me to write &lt;em&gt;the&lt;/em&gt; blog post.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://source.unsplash.com/E2qx9Ed2qIQ/800x600&#34; alt=&#34;suitcase&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;the-why&#34;&gt;The &amp;ldquo;why&amp;rdquo;&lt;/h3&gt;
&lt;p&gt;Just like working on our local machines, when working on an HPC cluster we really want to be able to have a consistent R environment for each of our projects that we snapshot at the time of working on said project. This means code that was written months or even years ago will still work as expected, even if the packages on CRAN have since been updated with breaking changes. The &lt;a href=&#34;https://rstudio.github.io/renv/index.html&#34;&gt;&lt;code&gt;renv&lt;/code&gt;&lt;/a&gt; package is brilliant at managing this - however, it is not intuitive to figure out how to use it when working on an HPC cluster - which is what I work through in the below post.&lt;/p&gt;
&lt;h3 id=&#34;assumptions&#34;&gt;Assumptions&lt;/h3&gt;
&lt;p&gt;This post makes a few assumptions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You are planning to use R for analysis, and know how to install packages on your local machine.&lt;/li&gt;
&lt;li&gt;You are working with a PBS-Pro HPC cluster, and know all of the core commands (this is not an introduction to &lt;code&gt;ssh&lt;/code&gt;, &lt;code&gt;qsub&lt;/code&gt;, &lt;code&gt;module load&lt;/code&gt; etc - see &lt;a href=&#34;https://sydney-informatics-hub.github.io/training.artemis.introhpc/&#34;&gt;here&lt;/a&gt; for an intro). I &lt;em&gt;think&lt;/em&gt; some of the below should generalise to SLURM or other cluster schedulers, but don&amp;rsquo;t have access to them so can&amp;rsquo;t test.&lt;/li&gt;
&lt;li&gt;You want to use the &lt;a href=&#34;https://rstudio.github.io/renv/articles/renv.html&#34;&gt;&lt;code&gt;renv&lt;/code&gt;&lt;/a&gt; library to manage the packages in your project (You do, you really do - I cannot recommend this highly enough, especially for sanity of future you). You know the basics of using &lt;code&gt;renv&lt;/code&gt; on your local machine, as per &lt;a href=&#34;https://rstudio.github.io/renv/articles/renv.html&#34;&gt;the &lt;code&gt;renv&lt;/code&gt; vignette&lt;/a&gt; - that&amp;rsquo;s probably the best intro to &lt;code&gt;renv&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Oof, now that that&amp;rsquo;s out of the way, let&amp;rsquo;s dive in üê¨ &amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;step-1-ssh-into-your-cluster-and-fire-up-an-interactive-session&#34;&gt;Step 1: &lt;code&gt;ssh&lt;/code&gt; into your cluster and fire up an interactive session&lt;/h3&gt;
&lt;p&gt;After you login to your HPC server, I recommend starting up an interactive session so you&amp;rsquo;re not working on and hence clogging up the login nodes. (You can do this on a login node too, but depending on how much compute prototyping your analysis requires this may crash üî• - or get you a cranky email from an admin üò° ).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;qsub -I -l walltime&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;4:0:0 -l &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1:ncpus&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1:mem&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;10gb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step-2-launch-r-and-install-renv&#34;&gt;Step 2: Launch R and install renv&lt;/h3&gt;
&lt;p&gt;After you&amp;rsquo;re logged in to the worker node, run the following commands to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;navigate to the project directory&lt;/li&gt;
&lt;li&gt;get rid of everything that may have inadvertently been preloaded&lt;/li&gt;
&lt;li&gt;launch R&lt;/li&gt;
&lt;li&gt;install &lt;code&gt;renv&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cd myprojectdirectory
module purge
module load R/4.0.4 &lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;- or whatver version or R is available on your cluster&lt;/span&gt;
R
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will open the R command line interface.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;install.packages&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;renv&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will return the details that the installation of &lt;code&gt;renv()&lt;/code&gt; will occur into a default location:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Installing package into ‚Äò/home/myusername/R/x86_64-pc-linux-gnu-library/4.0‚Äô
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And ask me to select a CRAN mirror for installation; after choosing the appropriate mirror and pressing return the package will be installed.&lt;/p&gt;
&lt;h3 id=&#34;step-3-install-the-packages-you-need-ideally-prototype-your-analysis-and-snapshot-the-installs-using-renv&#34;&gt;Step 3: Install the packages you need, (ideally) prototype your analysis and snapshot the installs using &lt;code&gt;renv&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;For this demo, I am going to assume that my project depends on the &lt;code&gt;tidyverse&lt;/code&gt; family of libraries, and that I want to install them in one go. (&lt;em&gt;In real life, I actually avoid taking this approach, and instead install each of the tidyverse libraries one by one as I use and need them.&lt;/em&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(renv)
&lt;span style=&#34;color:#75715e&#34;&gt;# initialise renv&lt;/span&gt;
renv&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will ask me to restart R, after doing which I can start installing packages.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;install.packages&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tidyverse&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# wait... and wait... for packages to successfully install&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(tidyverse)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I would next prototype my analysis code, installing as many packages as I need using the normal &lt;code&gt;install.packages()&lt;/code&gt; syntax - and eventually wrap the analysis up into a script.&lt;/p&gt;
&lt;p&gt;After you have installed all of the libraries you need, in the interactive R session, exectute the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# this will tell you whether renv has captured versions &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# of all of the packages you need to install&lt;/span&gt;
renv&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;()
&lt;span style=&#34;color:#75715e&#34;&gt;# if the result of renv::status() was not &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#34;The project is already synchronized with the lockfile.&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# run the below command to snapshot all currently installed libraries&lt;/span&gt;
renv&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;snapshot&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For this demo, I&amp;rsquo;m going to assume I want to run the following command that uses the built-in &lt;code&gt;gss_cat&lt;/code&gt; dataset from the &lt;code&gt;forcats&lt;/code&gt; package, the pipe and the &lt;code&gt;dplyr::filter()&lt;/code&gt; command - so nicely tests a few of the &lt;code&gt;tidyverse&lt;/code&gt; libraries in one line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;gss_cat &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(tvhours &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output should be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;# A tibble: 3 √ó 9
   year marital      age race  rincome    partyid     relig     denom    tvhours
  &amp;lt;int&amp;gt; &amp;lt;fct&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;fct&amp;gt;      &amp;lt;fct&amp;gt;       &amp;lt;fct&amp;gt;     &amp;lt;fct&amp;gt;      &amp;lt;int&amp;gt;
1  2000 Widowed       67 White Not appli‚Ä¶ Independent Protesta‚Ä¶ No deno‚Ä¶       2
2  2000 Never mar‚Ä¶    39 White Not appli‚Ä¶ Ind,near r‚Ä¶ Orthodox‚Ä¶ Not app‚Ä¶       4
3  2000 Divorced      25 White Not appli‚Ä¶ Not str de‚Ä¶ None      Not app‚Ä¶       1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;optional-step-3a-look-at-the-renvlock-file-to-see-all-of-the-packages-you-have-installed-into-the-project&#34;&gt;(Optional) Step 3a: Look at the &lt;code&gt;renv.lock&lt;/code&gt; file to see all of the packages you have installed into the project&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;renv.lock&lt;/code&gt; file stores details about the R version and all of the packages that are installed in your environment in &lt;code&gt;.json&lt;/code&gt; format. So installing the &lt;code&gt;tidyverse&lt;/code&gt; packages in one fell swoop like I did above results in quite a long list of libraries (last 5 shown here):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vroom&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Package&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vroom&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.5.3&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Source&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Repository&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Repository&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CRAN&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Hash&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aac6012f34348b3ca6bf373fe7172b06&amp;#34;&lt;/span&gt;
    }&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;withr&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Package&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;withr&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2.4.2&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Source&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Repository&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Repository&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CRAN&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Hash&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ad03909b44677f930fa156d47d7a3aeb&amp;#34;&lt;/span&gt;
    }&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xfun&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Package&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xfun&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.24&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Source&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Repository&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Repository&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CRAN&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Hash&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;88cdb9779a657ad80ad942245fffba31&amp;#34;&lt;/span&gt;
    }&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xml2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Package&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xml2&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.3.2&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Source&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Repository&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Repository&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CRAN&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Hash&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d4d71a75dd3ea9eb5fa28cc21f9585e2&amp;#34;&lt;/span&gt;
    }&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yaml&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Package&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yaml&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2.2.1&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Source&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Repository&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Repository&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CRAN&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Hash&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2826c5d9efb0a88f657c7a679c7106db&amp;#34;&lt;/span&gt;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I sometimes find that &lt;code&gt;renv::status()&lt;/code&gt; and &lt;code&gt;renv::snapshot()&lt;/code&gt; in step 3 don&amp;rsquo;t immediately see all of the libraries I have installed in the environment, and - weirdly - I need to restart R and run &lt;code&gt;renv::status()&lt;/code&gt; again before it will detect that a bunch of libraries have been installed. So if you&amp;rsquo;re missing libraries in the &lt;code&gt;renv.lock&lt;/code&gt; file you know need to be there - restarting R and re-running &lt;code&gt;renv::status()&lt;/code&gt; and &lt;code&gt;renv::snapshot()&lt;/code&gt; may be the way to go.&lt;/p&gt;
&lt;h3 id=&#34;step-4-save-your-script-and-submit-it-via-pbs&#34;&gt;Step 4: Save your script and submit it via PBS&lt;/h3&gt;
&lt;p&gt;Wrap the above code into &lt;code&gt;myscript.R&lt;/code&gt; , with the following contents:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(tidyverse)
gss_cat &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(tvhours &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then create a shell script (&lt;code&gt;myshellscript.sh&lt;/code&gt;) that can be submitted to the PBS queue:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#! /bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;module purge
module load R/4.0.4
cd /to/my/projectpath
Rscript myscript.R
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, submit to the queue:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;qsub -l walltime&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0:10:0 -l &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1:ncpus&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1:mem&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1gb -N mytestscript myshellscript.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that I&amp;rsquo;m only asking for 1 Gb of RAM and 10 minutes of walltime. This is probably a lot less than you&amp;rsquo;d need for any &amp;ldquo;real&amp;rdquo; analysis - but it&amp;rsquo;s perfectly fine for my script above.&lt;/p&gt;
&lt;p&gt;After that executes, I get the following output in &lt;code&gt;mytestscript.o123456&lt;/code&gt;, where 123456 is the job number that my PBS scheduler automatically assigned to my script run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# A tibble: 3 √ó 9&lt;/span&gt;
   year marital      age race  rincome    partyid     relig     denom    tvhours
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;int&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;fct&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;int&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;fct&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;fct&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;fct&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;fct&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;fct&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;int&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt; Widowed       &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt; White Not appli‚Ä¶ Independent Protesta‚Ä¶ No deno‚Ä¶       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt; Never mar‚Ä¶    &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt; White Not appli‚Ä¶ Ind,near r‚Ä¶ Orthodox‚Ä¶ Not app‚Ä¶       &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt; Divorced      &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; White Not appli‚Ä¶ Not str de‚Ä¶ None      Not app‚Ä¶       &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the package loading messages in &lt;code&gt;mytestscript.e123456&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;Warning message&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
renv took longer than &lt;span style=&#34;color:#a6e22e&#34;&gt;expected &lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt; seconds) to activate the sandbox.

The sandbox can be disabled by setting&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;

    RENV_CONFIG_SANDBOX_ENABLED &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;

within an appropriate start&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;up .Renviron file. See `?renv::config` for more details.
Warning&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; program compiled against libxml &lt;span style=&#34;color:#ae81ff&#34;&gt;209&lt;/span&gt; using older &lt;span style=&#34;color:#ae81ff&#34;&gt;207&lt;/span&gt;
‚îÄ‚îÄ Attaching packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse &lt;span style=&#34;color:#ae81ff&#34;&gt;1.3.1&lt;/span&gt; ‚îÄ‚îÄ
‚úî ggplot2 &lt;span style=&#34;color:#ae81ff&#34;&gt;3.3.5&lt;/span&gt;     ‚úî purrr   &lt;span style=&#34;color:#ae81ff&#34;&gt;0.3.4&lt;/span&gt;
‚úî tibble  &lt;span style=&#34;color:#ae81ff&#34;&gt;3.1.3&lt;/span&gt;     ‚úî dplyr   &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0.7&lt;/span&gt;
‚úî tidyr   &lt;span style=&#34;color:#ae81ff&#34;&gt;1.1.3&lt;/span&gt;     ‚úî stringr &lt;span style=&#34;color:#ae81ff&#34;&gt;1.4.0&lt;/span&gt;
‚úî readr   &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0.0&lt;/span&gt;     ‚úî forcats &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5.1&lt;/span&gt;
‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ &lt;span style=&#34;color:#a6e22e&#34;&gt;tidyverse_conflicts&lt;/span&gt;() ‚îÄ‚îÄ
‚úñ dplyr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;() masks stats&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;()
‚úñ dplyr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lag&lt;/span&gt;()    masks stats&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lag&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This includes a warning that the &lt;code&gt;renv&lt;/code&gt; sandbox took a while to load, but this doesn&amp;rsquo;t seem to affect functionality, so I haven&amp;rsquo;t disabled it.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;That&amp;rsquo;s it! Hopefully the above helps you use &lt;code&gt;renv()&lt;/code&gt; with a PBS-Pro based HPC cluster üòä, and please do leave a comment if something isn&amp;rsquo;t clear or doesn&amp;rsquo;t work as expected.&lt;/p&gt;
&lt;h3 id=&#34;even-more-notes&#34;&gt;(Even more) notes&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;This workflow means that your package install information (i.e. the binaries) are stored in the project folder, in the &lt;code&gt;renv&lt;/code&gt; folder. So they are &lt;em&gt;not&lt;/em&gt; stored on the worker nodes where your job is being executed, but instead in your home or project folder. This is a &lt;em&gt;good&lt;/em&gt; thing, as it means you&amp;rsquo;re not hitting up CRAN to install packages every time you run a job.&lt;/li&gt;
&lt;li&gt;This workflow also means that while you can &lt;code&gt;rsync&lt;/code&gt; your project folder from your local machine to the remove server (or prototype on your local machine), you will need to run &lt;code&gt;renv::restrore()&lt;/code&gt; once on the &amp;ldquo;other&amp;rdquo; machine prior to being able to execute or deploy the script.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>ggplot batch variable visualisation in Rmd without for loops</title>
      <link>https://daryavanichkina.com/posts/2021-04-12-mappingggplot2/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://daryavanichkina.com/posts/2021-04-12-mappingggplot2/</guid>
      <description>&lt;p&gt;When working with data, often you want to make a specific type of plot across a bunch of variables at once. The R/tidyverse way of doing this involves some (basic) non-standard evaluation, but - because I know I&amp;rsquo;ll forget how to do this in the future - I thought I&amp;rsquo;d write up this short blog post with code that works.&lt;/p&gt;
&lt;p&gt;In the below snippet, we use ggplot on the built-in mtcars dataset to make a scatterplot of each of the variables against the &lt;code&gt;mpg&lt;/code&gt; variable, colouring it by the number of cylinders (on the fly converted to a factor).&lt;/p&gt;
&lt;p&gt;To do this, I define the &lt;code&gt;makeplots()&lt;/code&gt; function, which takes a single argument called &lt;code&gt;myfeature&lt;/code&gt;. Within the function, I need to save the plot as a variable (&lt;code&gt;a&lt;/code&gt;), and then print it so that it is rendered in the Rmd. I grab the column names I&amp;rsquo;d like to iterate over and save them into a character vector (In real life, I tend do grab them all using &lt;code&gt;names(mtcars)&lt;/code&gt;, but I choose a few manually to keep this blog post manageable. Also, I could have used commands like &lt;code&gt;setdiff()&lt;/code&gt; to subset the &lt;code&gt;names(mtcars)&lt;/code&gt; character vector to remove, for example, mpg itself).&lt;/p&gt;
&lt;p&gt;I also use the &lt;code&gt;as_label(quo(.))&lt;/code&gt; functions to extract the string of the variable name itself, so I can use it to set the title of the plot.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(purrr)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(dplyr)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(ggplot2)
makeplots &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(myfeature){
  a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; mtcars &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;select&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!!&lt;/span&gt;myfeature, mpg, cyl) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;unique&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!!&lt;/span&gt;myfeature, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mpg, colour &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.factor&lt;/span&gt;(cyl))) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
    &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_point&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
    &lt;span style=&#34;color:#a6e22e&#34;&gt;labs&lt;/span&gt;(title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;paste0&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;as_label&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;quo&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!!&lt;/span&gt;myfeature)), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; vs mpg&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_classic&lt;/span&gt;()
  
  &lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(a)
}

&lt;span style=&#34;color:#75715e&#34;&gt;# to get all of the column names&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# mycolnames &amp;lt;- names(mtcars)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I&amp;#39;m using a shorter vector in the interests of not overwhelming this blog post with ALL the images&lt;/span&gt;
mycolnames &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;disp&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hp&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;drat&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;walk&lt;/span&gt;(mycolnames, &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;makeplots&lt;/span&gt;(myfeature &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sym&lt;/span&gt;(.x))) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/2104_disp.png&#34; alt=&#34;Disp&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/2104_hp.png&#34; alt=&#34;HP&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/2104_drat.png&#34; alt=&#34;Drat&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Avoiding 443 errors &amp; RCurl woes with the REDCap API on Windows</title>
      <link>https://daryavanichkina.com/posts/2021-04-09-redcap-api-crossplatform/</link>
      <pubDate>Fri, 09 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://daryavanichkina.com/posts/2021-04-09-redcap-api-crossplatform/</guid>
      <description>&lt;p&gt;Like many other educational and research institutions, the University of Sydney (where I currently work) supports the use of REDCap as a survey platform. I also use it, in part because one of the most attractive features of the REDCap API over other survey tools like Qualtrics, Google Forms and SurveyMonkey is the fact that the API playground supports GUI-style selection of what you want, with REDCap providing template code in a wide variety of languages.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/2104_what2exportREDCap.png&#34; alt=&#34;What to export&#34;&gt;&lt;/p&gt;
&lt;p&gt;Languages include PHP, Perl, Python, R, Ruby, Java &amp;amp; UNIX&amp;rsquo;s curl, and output format options include json, csv and XML.&lt;/p&gt;
&lt;p&gt;Further, when you request to export Records, it will nicely provide you with even more options that allow you to point and click to get the actual, real data you want, without needing to delve into the joys of XPATHs and XML.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/2104_RecordsExport.png&#34; alt=&#34;Records export&#34;&gt;&lt;/p&gt;
&lt;p&gt;Under the hood, this is a POST form, and REDCap will explicitly show you what data you&amp;rsquo;ve submitted in the &amp;ldquo;Raw request parameters&amp;rdquo; tab.&lt;/p&gt;
&lt;p&gt;It will also provide you with the code you&amp;rsquo;d use to get the same data programmatically. There&amp;rsquo;s also a &amp;ldquo;Click the Execute Request button to execute a real API request, and it will display the API response in a text box below.&amp;rdquo; so you can preview what you&amp;rsquo;d get back as an object when loading this into your programming language of choice.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/2104_PostForm.png&#34; alt=&#34;Post form&#34;&gt;&lt;/p&gt;
&lt;p&gt;As an example, when I try to retrieve the records from our feedback form (which I&amp;rsquo;ve called &lt;code&gt;myformname&lt;/code&gt; in the images/code above), it suggests the following R code for me (this returns the records themselves in a csv, and the errors in json):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env Rscript&lt;/span&gt;
apisecret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;myapikey&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# you get this when you enable REDCap API access for your project&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(RCurl)
result &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;postForm&lt;/span&gt;(
    uri&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://redcap.sydney.edu.au/api/&amp;#39;&lt;/span&gt;,
    token&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;apisecret,
    content&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;record&amp;#39;&lt;/span&gt;,
    format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;csv&amp;#39;&lt;/span&gt;,
    type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flat&amp;#39;&lt;/span&gt;,
    csvDelimiter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;forms[0]&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;myformname&amp;#39;&lt;/span&gt;,
    rawOrLabel&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;raw&amp;#39;&lt;/span&gt;,
    rawOrLabelHeaders&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;raw&amp;#39;&lt;/span&gt;,
    exportCheckboxLabel&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;false&amp;#39;&lt;/span&gt;,
    exportSurveyFields&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;true&amp;#39;&lt;/span&gt;,
    exportDataAccessGroups&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;false&amp;#39;&lt;/span&gt;,
    returnFormat&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;json&amp;#39;&lt;/span&gt;
)
&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(result)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And all is well and good &amp;hellip; if you&amp;rsquo;re on a Mac! However, when I recently tried to run this (fully working!) code on a Windows machine (since this particular survey data goes into a PowerBI dashboard I&amp;rsquo;ve built) - I encountered a 443 error instead! Apparently, this is a &lt;a href=&#34;https://github.com/dewittpe/REDCapExporter/issues/16&#34;&gt;known issue&lt;/a&gt;, but while it&amp;rsquo;s suggested to use the &lt;code&gt;httr&lt;/code&gt; package instead (or one of the dedicated REDCap R packages), there was no template code available.&lt;/p&gt;
&lt;p&gt;After a bit of exploration, the below ended up working, and I&amp;rsquo;m sharing this template code in the hopes of saving others (at Sydney Uni and elsewhere) the hassle of having to figure this out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env Rscript&lt;/span&gt;
apisecret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;myapikey&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# you get this when you enable REDCap API access for your project&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(curl)
h1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;new_handle&lt;/span&gt;()
&lt;span style=&#34;color:#a6e22e&#34;&gt;handle_setform&lt;/span&gt;(h1,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;token&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; apisecret,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;content&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;record&amp;#34;&lt;/span&gt;, 
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;format&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;csv&amp;#34;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;type&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flat&amp;#39;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;csvDelimiter&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;forms[0]&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;myformname&amp;#39;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rawOrLabel&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;raw&amp;#39;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rawOrLabelHeaders&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;raw&amp;#39;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;exportCheckboxLabel&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;false&amp;#39;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;exportSurveyFields&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;true&amp;#39;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;exportDataAccessGroups&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;false&amp;#39;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;returnFormat&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;json&amp;#39;&lt;/span&gt;)

surveyresults &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read.csv&lt;/span&gt;(text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rawToChar&lt;/span&gt;(
  &lt;span style=&#34;color:#a6e22e&#34;&gt;curl_fetch_memory&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://redcap.sydney.edu.au/api/&amp;#34;&lt;/span&gt;, handle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h1)&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;content),
  na.strings &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, the &lt;code&gt;curl::handle_setform()&lt;/code&gt; command looks pretty similar to the &lt;code&gt;RCurl::postForm()&lt;/code&gt; request, but it needs to be combined with the &lt;code&gt;curl::curl_fetch_memory()&lt;/code&gt; command&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, which has a few quirks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It returns the actual data in the &lt;code&gt;content&lt;/code&gt; attribute, and not the data frame directly - hence the need for the &lt;code&gt;$content&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;It returns the data in raw format (and, no, setting the &lt;code&gt;rawOrLabel&lt;/code&gt; to label does not solve this), so you need to pass it into &lt;code&gt;base::rawToChar()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read.csv&lt;/code&gt;&amp;rsquo;s defaults are to accept a filepath, so we use an arguement called &lt;code&gt;text&lt;/code&gt; to specify that we&amp;rsquo;re straight feeding in the actual data in instead.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The other useful thing to &amp;ldquo;grab&amp;rdquo; when working with data tends to be the data dictionary, for which the code looks quite similar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env Rscript&lt;/span&gt;
apisecret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;myapikey&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# you get this when you enable REDCap API access for your project&lt;/span&gt;
h2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;new_handle&lt;/span&gt;()
&lt;span style=&#34;color:#a6e22e&#34;&gt;handle_setform&lt;/span&gt;(h2,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;token&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; apisecret,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;content&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;, 
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;format&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;csv&amp;#34;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;forms[0]&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;myformname&amp;#39;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;returnFormat&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;csv&amp;#39;&lt;/span&gt;)


datadict &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read.csv&lt;/span&gt;(text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rawToChar&lt;/span&gt;(
  &lt;span style=&#34;color:#a6e22e&#34;&gt;curl_fetch_memory&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://redcap.sydney.edu.au/api/&amp;#34;&lt;/span&gt;, handle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h2)&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;content)
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I hope this is helpful for others who use REDCap on Windows, or who need to write code that works across all of the major operating system platforms!&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Yes, we could have used the &lt;code&gt;curl::curl_fetch_disk()&lt;/code&gt; command to download the file to disk, which seems to work a lot better and actually save the file as a non-binary .csv file. However, for this particular project, I&amp;rsquo;m doing a lot of data cleaning &lt;em&gt;before&lt;/em&gt; I write the output to disk, and I&amp;rsquo;d rather not store two copies of the same scrape. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Living dangerously: a newbie guide to running multiple version of R on a Mac</title>
      <link>https://daryavanichkina.com/posts/2020-rswitch-guide/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://daryavanichkina.com/posts/2020-rswitch-guide/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://unsplash.com/photos/3uunq0n1WRY&#34; alt=&#34;TBH I want to be this chicken&amp;hellip;&#34;&gt;&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;d have to be living under a rock in the R community to not be aware of the fact that R 4.0 has been released, with some major changes, the biggest of which is probably the new default for &lt;code&gt;read.table()&lt;/code&gt;: &lt;code&gt;stringsAsFactors = FALSE&lt;/code&gt;, as well as the fact that &lt;code&gt;matrix()&lt;/code&gt; now converts character columns to factors and factors to integers.&lt;/p&gt;
&lt;p&gt;In the past, I&amp;rsquo;ve always been too &amp;ldquo;chicken&amp;rdquo; to try running multiple versions of R on my work laptop, as I&amp;rsquo;ve usually got a few key analysis projects going that need to be delivered on time and within full feature scope - which means I don&amp;rsquo;t have time to fix basic version incompatibility bugs. But with this major new release I was sorely tempted, so have gone down the rabbit-hole of installing &lt;a href=&#34;https://rud.is/rswitch/guide/&#34;&gt;RSwitch&lt;/a&gt; and R4.0 on my Mac (Catalina 10.15.4). Below I document, in what is probably excruciating detail, the steps of how I got this to work. I&amp;rsquo;ve played with it for all of two days, and it seems to work - so I&amp;rsquo;ve written this post in the hopes of helping others. Also, I had some funky hiccups with getting the right filepath and not using sudo at the outset, so I&amp;rsquo;m hoping this helps someone avoid some extra &lt;code&gt;rm -r ...path...&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;step-0-critical-close-r--rstudio&#34;&gt;Step 0 (CRITICAL): Close R &amp;amp; RStudio&lt;/h2&gt;
&lt;p&gt;Make sure you have closed R and RStudio prior to embarking on the below. Updating R versions mid-analysis can have &amp;hellip; unintended consequences.&lt;/p&gt;
&lt;h2 id=&#34;step-1-download-rswitch-and-install-it&#34;&gt;Step 1: Download RSwitch and install it&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://rud.is/rswitch/&#34;&gt;Download RSwitch&lt;/a&gt; and install it. Go through all of the hoops of getting it approved by MacOS and able to be run by accepting the risks of running software from an unidentified developer. (Eventually) End up with a nice switch icon in your menubar.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;step-2-get-new-r&#34;&gt;Step 2: Get new R&lt;/h2&gt;
&lt;p&gt;[As usual] There is more than one way to get a new version of R onto your machine.&lt;/p&gt;
&lt;h4 id=&#34;option-1-gui-imho-riskier&#34;&gt;Option 1: GUI (IMHO riskier)&lt;/h4&gt;
&lt;p&gt;Download the graphical installer &lt;code&gt;R-4.0.0.pkg&lt;/code&gt;, which is the top link when on &lt;a href=&#34;https://cran.r-project.org/&#34;&gt;CRAN&lt;/a&gt; you click on &amp;ldquo;Download R for (Mac) OS X&amp;rdquo;. This is NOT the approach I took, because if done wrong this approach can remove your existing R installation, but I will describe how in theory I think it&amp;rsquo;s meant to be used below.&lt;/p&gt;
&lt;h4 id=&#34;option-2-pre-built-copy-the-approach-i-took&#34;&gt;Option 2: Pre-built copy (the approach I took)&lt;/h4&gt;
&lt;p&gt;Download a pre-built &lt;code&gt;.tar.gz&lt;/code&gt; copy of the R framework from the &lt;a href=&#34;https://mac.r-project.org/&#34;&gt;developer page&lt;/a&gt;. In my case, I downloaded the latest stable branch &lt;code&gt;R-4.0-branch.tar.gz (72 Mb)&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/200501_RBuilds.png&#34; alt=&#34;Which R?&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;step-3-apply-funky-magic&#34;&gt;Step 3: Apply funky magic&lt;/h2&gt;
&lt;h4 id=&#34;option-1-gui&#34;&gt;Option 1: GUI&lt;/h4&gt;
&lt;p&gt;So the reason I think the GUI is &amp;ldquo;riskier&amp;rdquo; is because usually when you run the GUI for a new version of R, it cleanly removes the old version of R from your machine. The workaround to prevent this from happening is to make your system, and hence the R installer, &amp;ldquo;forget&amp;rdquo; it has R installed. To do this you need to open a Terminal and type the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pkgutil --forget org.r-project.R.el-capitan.fw.pkg \
             --forget org.r-project.x86_64.tcltk.x11 \
             --forget org.r-project.x86_64.texinfo \
             --forget org.r-project.R.el-capitan.GUI.pkg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For details about &lt;strong&gt;why&lt;/strong&gt; this works see &lt;a href=&#34;https://cran.rstudio.org/doc/manuals/R-admin.html#Multiple-versions&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After that completes successfully (note:  you&amp;rsquo;ll need to enter your password to use sudo) you can run the GUI installer.&lt;/p&gt;
&lt;h4 id=&#34;option-2-command-line&#34;&gt;Option 2: Command line&lt;/h4&gt;
&lt;p&gt;I&amp;rsquo;m fairly comfortable with the command line, so was happy to use that option, but did make a few silly mistakes with the paths, so am documenting what worked below, in the hope that it helps others:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use the Terminal (&lt;code&gt;cd ...&lt;/code&gt;) to navigate to where you&amp;rsquo;ve got the &lt;code&gt;R.***.tar.gz&lt;/code&gt; and record its location, or -if you already know it - just copy the path to it to the clipboard.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Navigate to your root directory: &lt;code&gt;cd /&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;sudo tar -xvzf path_to_R_tar.gz_file&lt;/code&gt;, where &lt;code&gt;path_to_R_tar.gz_file&lt;/code&gt; is the path you saved to the clipboard. After you enter your password, R should be installed and you should have the latest version of R active on your machine.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;step-4-painfully-battle-the-security-stuff&#34;&gt;Step 4: Painfully battle the security stuff&lt;/h2&gt;
&lt;p&gt;Try to open Rstudio. This is probably something that happens only with Option 2 above, but I got a bunch of security warnings from MacOS and had to &amp;ldquo;Allow Anyway&amp;rdquo; a ton (twice) before RStudio was able to load R 4.0.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/200501_Harm2.png&#34; alt=&#34;Harm2&#34;&gt;&lt;/p&gt;
&lt;p&gt;Accept all the things:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/200501_Harm1.png&#34; alt=&#34;Harm1&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;step-5-switch&#34;&gt;Step 5: Switch&lt;/h2&gt;
&lt;p&gt;To go back to having your existing, &amp;ldquo;production&amp;rdquo; version of R active on your machine use RSwitch to select that older version:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/200501_Rswitch.png&#34; alt=&#34;pRSwitch&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I hope this post has been helpful, and let me know in a comment if something isn&amp;rsquo;t working as described or something&amp;rsquo;s not clear. (Probably) next post: updating libraries&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>R for Data Science Day 1</title>
      <link>https://daryavanichkina.com/posts/2019-r-for-data-science-day-1/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://daryavanichkina.com/posts/2019-r-for-data-science-day-1/</guid>
      <description>&lt;p&gt;I am incredibly excited that RStudio has begun an &lt;a href=&#34;https://education.rstudio.com/trainers/&#34;&gt;instructor certification program&lt;/a&gt; based on the Carpentries, so of course I signed up as soon as my overcommited nature allowed! This also provides me with the excuse and motivation to finally formally work my way through &lt;a href=&#34;https://r4ds.had.co.nz/&#34;&gt;R for Data Science&lt;/a&gt;, a book I have read while waiting for GTT tests during my pregnancy and google-landed upon an umpteen number of times while debugging code, but never taken the time to sit down and do the exercises for - and of course the pedagogue in me knows quite well that THAT is how you actually learn and internalise the principles and concepts in any material, especially if it deals with programming and analysis. So over the next few weeks I plan to work my way through R4DS, and this post is the first in which I dive into the exercises.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;personal-highly-non-exhaustive-notes-on-section-i-explore&#34;&gt;Personal, highly non-exhaustive notes on section I: Explore&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(tidyverse)
&lt;span style=&#34;color:#a6e22e&#34;&gt;theme_set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;theme_minimal&lt;/span&gt;())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;steps-of-the-data-pipeline&#34;&gt;Steps of the data pipeline:&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://d33wubrfki0l68.cloudfront.net/795c039ba2520455d833b4034befc8cf360a70ba/558a5/diagrams/data-science-explore.png&#34; alt=&#34;https://r4ds.had.co.nz/explore-intro.html&#34; title=&#34;Tidy Data Pipeline&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Import&lt;/strong&gt;: take data stored in a file, database, or web API, and load it into a data frame in R.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;wrangling&#34;&gt;Wrangling:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Tidying&lt;/strong&gt; - storing data in a consistent form that matches the semantics of the dataset with the way it is stored. In brief, when your data is tidy, each column is a variable, and each row is an observation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Transformation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;narrowing in on observations of interest (like all people in one city, or all data from the last year),&lt;/li&gt;
&lt;li&gt;creating new variables that are functions of existing variables (like computing speed from distance and time),&lt;/li&gt;
&lt;li&gt;calculating a set of summary statistics (like counts or means). Together, tidying and transforming are called wrangling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;small-data-vs-big-data&#34;&gt;Small data vs big data&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Small/medium data: hundreds of megabytes of data, and with a little care up to 1-2 Gb of data.&lt;/li&gt;
&lt;li&gt;If you‚Äôre routinely working with larger data (10-100 Gb, say), you should learn more about data.table.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;is-big-data-really-big-two-ways-of-thinking-small-about-big-data&#34;&gt;Is big data really big? Two ways of thinking small about big data&lt;/h2&gt;
&lt;h3 id=&#34;sampling&#34;&gt;Sampling&lt;/h3&gt;
&lt;p&gt;Sampling may be enough to answer the question.&lt;/p&gt;
&lt;h3 id=&#34;your-big-data-problem-is-actually-a-large-number-of-small-data-problems&#34;&gt;Your big data problem is actually a large number of small data problems&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Each individual problem might fit in memory, but you have millions of them. For example, you might want to fit a model to each person in your dataset. That would be trivial if you had just 10 or 100 people, but instead you have a million.&lt;/li&gt;
&lt;li&gt;So you need a system (like Hadoop or Spark) that allows you to send different datasets to different computers for processing.&lt;/li&gt;
&lt;li&gt;Once you‚Äôve figured out how to answer the question for a single subset using the tools described in this book, you can use tools like sparklyr, rhipe, and ddr to solve it for the full dataset.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;key-definitions-for-tidy-data-reference&#34;&gt;Key definitions for tidy data (reference)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;variable&lt;/strong&gt; is a quantity, quality, or property that you can measure.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;value&lt;/strong&gt; is the state of a variable when you measure it. The value of a variable may change from measurement to measurement.&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;observation&lt;/strong&gt; is a set of measurements made under similar conditions (you usually make all of the measurements in an observation at the same time and on the same object). An observation will contain several values, each associated with a different variable. I‚Äôll sometimes refer to an observation as a data point.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tabular data&lt;/strong&gt; is a set of values, each associated with a variable and an observation. Tabular data is tidy if each value is placed in its own ‚Äúcell‚Äù, each variable in its own column, and each observation in its own row.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;variable-types&#34;&gt;Variable types&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A variable is continuous if it can take any of an infinite set of ordered values.&lt;/li&gt;
&lt;li&gt;A variable is categorical if it can only take one of a small set of values. In R, categorical variables are usually saved as factors or character vectors.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;eda-key-definitions&#34;&gt;EDA key definitions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Variation&lt;/strong&gt; is the tendency of the values of a variable to change from measurement to measurement.&lt;/li&gt;
&lt;li&gt;Covariation is the tendency for the values of two or more variables to vary together in a related way. T&lt;/li&gt;
&lt;li&gt;he residuals give us a view of the price of the diamond, once the effect of carat has been removed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;new-to-me-ggplot-aesthetics&#34;&gt;New (to me) &lt;code&gt;ggplot()&lt;/code&gt; aesthetics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;stroke&lt;/code&gt; - is either the size of the point (for a default &lt;code&gt;geom_point()&lt;/code&gt;) OR, if used with shape 21-25, which have both a colour and a fill, is the thickness of the stroke around the plotted shape.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can generally use geoms and stats interchangeably! For example, you can use stat_count() instead of geom_bar() to make the same plot!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; diamonds) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_bar&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cut, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ..count.. &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(..count..), fill &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; color))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/1912_ggplotproportion.png&#34; alt=&#34;Ggplot proportion chart&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# not really new, but I&amp;#39;m sure I&amp;#39;ll forget position = &amp;#34;fill&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; diamonds) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_bar&lt;/span&gt;(mapping &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cut, fill &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; clarity), position &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fill&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/1912_proportionchart.png&#34; alt=&#34;proportion&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# pie chart from bar&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; diamonds) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_bar&lt;/span&gt;(mapping &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, fill &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; clarity)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;coord_polar&lt;/span&gt;(theta &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/1912_piechart.png&#34; alt=&#34;pie chart&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;+ coord_cartesian(xlim = c(1,2), ylim)&lt;/code&gt; - retain outlier&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;+ xlim()&lt;/code&gt; - remove outlier&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On average, humans are best able to perceive differences in angles relative to 45 degrees. The function ggthemes::bank_slopes() will calculate the optimal aspect ratio to bank slopes to 45-degrees.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the &lt;code&gt;near()&lt;/code&gt; function to test for equality of numbers (as it&amp;rsquo;s better able to handle those pesky computer math issues)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;code&gt;matches(&amp;quot;(.)\\1&amp;quot;)&lt;/code&gt; with &lt;code&gt;select()&lt;/code&gt; to pick variables based on arbitrary regex. &lt;code&gt;num_range(&amp;quot;x&amp;quot;, 1:3)&lt;/code&gt;: matches x1, x2 and x3.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;select()&lt;/code&gt; in conjunction with the &lt;code&gt;everything()&lt;/code&gt; helper, when you want to , for example, move a handful of variables to the start of the data frame.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;select&lt;/span&gt;(flights, time_hour, air_time, &lt;span style=&#34;color:#a6e22e&#34;&gt;everything&lt;/span&gt;())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;# A tibble: 336,776 x 19
   time_hour           air_time  year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier
   &amp;lt;dttm&amp;gt;                 &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  
 1 2013-01-01 05:00:00      227  2013     1     1      517            515         2      830            819        11 UA     
 2 2013-01-01 05:00:00      227  2013     1     1      533            529         4      850            830        20 UA     
 3 2013-01-01 05:00:00      160  2013     1     1      542            540         2      923            850        33 AA     
 4 2013-01-01 05:00:00      183  2013     1     1      544            545        -1     1004           1022       -18 B6     
 5 2013-01-01 06:00:00      116  2013     1     1      554            600        -6      812            837       -25 DL     
 6 2013-01-01 05:00:00      150  2013     1     1      554            558        -4      740            728        12 UA     
 7 2013-01-01 06:00:00      158  2013     1     1      555            600        -5      913            854        19 B6     
 8 2013-01-01 06:00:00       53  2013     1     1      557            600        -3      709            723       -14 EV     
 9 2013-01-01 06:00:00      140  2013     1     1      557            600        -3      838            846        -8 B6     
10 2013-01-01 06:00:00      138  2013     1     1      558            600        -2      753            745         8 AA     
# ‚Ä¶ with 336,766 more rows, and 7 more variables: flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, distance &amp;lt;dbl&amp;gt;,
#   hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To generate rolling aggregates of data: R provides functions for running sums, products, mins and maxes: &lt;code&gt;cumsum()&lt;/code&gt;, &lt;code&gt;cumprod()&lt;/code&gt;, &lt;code&gt;cummin()&lt;/code&gt;, &lt;code&gt;cummax()&lt;/code&gt;; and dplyr provides &lt;code&gt;cummean()&lt;/code&gt; for cumulative means. If you need rolling aggregates (i.e. a sum computed over a rolling window), try the RcppRoll package.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ranking functions: &lt;code&gt;min_rank(x)&lt;/code&gt; (default gives smallest values the small ranks; use &lt;code&gt;desc(x)&lt;/code&gt; to give the largest values the smallest ranks). Otherwise: &lt;code&gt;row_number()&lt;/code&gt;, &lt;code&gt;dense_rank()&lt;/code&gt;, &lt;code&gt;percent_rank()&lt;/code&gt;, &lt;code&gt;cume_dist()&lt;/code&gt;, &lt;code&gt;ntile()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;%/%&lt;/code&gt; and &lt;code&gt;%%&lt;/code&gt; for modular division and remainders.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;very-clear-table-of-ggplot-mappings-from-herehttpsjrnoldgithubior4ds-exercise-solutionsdata-visualisationhtml&#34;&gt;Very clear table of ggplot mappings (from &lt;a href=&#34;https://jrnold.github.io/r4ds-exercise-solutions/data-visualisation.html&#34;&gt;here&lt;/a&gt;)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;geom&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;default stat&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;shared docs&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_abline()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_hline()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_vline()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_bar()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_count()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_col()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_bin2d()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_bin_2d()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_blank()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_boxplot()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_boxplot()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_countour()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_countour()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_count()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_sum()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_density()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_density()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_density_2d()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_density_2d()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_dotplot()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_errorbarh()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_hex()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_hex()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_freqpoly()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_bin()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_histogram()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_bin()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_crossbar()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_errorbar()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_linerange()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_pointrange()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_map()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_point()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_map()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_path()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_line()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_step()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_point()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_polygon()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_qq_line()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_qq_line()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_qq()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_qq()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_quantile()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_quantile()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_ribbon()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_area()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_rug()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_smooth()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_smooth()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_spoke()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_label()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_text()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_raster()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_rect()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_tile()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_violin()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_ydensity()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_sf()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_sf()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;very-clear-table-of-ggplot-stats-from-herehttpsjrnoldgithubior4ds-exercise-solutionsdata-visualisationhtml&#34;&gt;Very clear table of ggplot stats (from &lt;a href=&#34;https://jrnold.github.io/r4ds-exercise-solutions/data-visualisation.html&#34;&gt;here&lt;/a&gt;)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;stat&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;default geom&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;shared docs&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_ecdf()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_step()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_ellipse()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_path()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_function()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_path()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_identity()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_point()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_summary_2d()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_tile()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_summary_hex()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_hex()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_summary_bin()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_pointrange()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_summary()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_pointrange()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_unique()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_point()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_count()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_bar()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_bin_2d()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_tile()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_boxplot()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_boxplot()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_countour()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_contour()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_sum()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_point()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_density()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_area()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_density_2d()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_density_2d()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_bin_hex()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_hex()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_bin()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_bar()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_qq_line()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_path()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_qq()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_point()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_quantile()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_quantile()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_smooth()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_smooth()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_ydensity()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_violin()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stat_sf()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;geom_rect()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
  </channel>
</rss>
